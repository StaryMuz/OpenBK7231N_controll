# ovladani_rele.py
# -*- coding: utf-8 -*-
import os
import sys
import requests
import pandas as pd
from datetime import datetime
import time
from tuyapy2 import TuyaApi

# ====== KONFIGURAƒåN√ç PROMƒöNN√â ======
LIMIT_EUR = float(os.getenv("LIMIT_EUR", "13.0"))  # EUR/MWh, lze p≈ôepsat v secrets
CENY_PATH = os.getenv("CENY_PATH", "ceny_ote.csv")  # cesta k souboru s cenami

# P≈ô√≠stupov√© √∫daje (z GitHub Secrets nebo .env)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
API_KEY = os.getenv("TUYA_ACCESS_ID")
API_SECRET = os.getenv("TUYA_ACCESS_SECRET")
EMAIL = os.getenv("TUYA_EMAIL")
PASSWORD = os.getenv("TUYA_PASSWORD")
DEVICE_NAME = os.getenv("DEVICE_NAME")  # N√°zev za≈ô√≠zen√≠ v aplikaci Smart Life

# potvrzovac√≠ parametry
POKUSY = int(os.getenv("POKUSY", "3"))
CEKANI = int(os.getenv("CEKANI", "60"))  # v sekund√°ch

# ====== FUNKCE ======

def odesli_telegram_zpravu(zprava):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ö†Ô∏è Telegram nen√≠ nastaven ‚Äì p≈ôeskoƒçeno")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": zprava,
        "parse_mode": "HTML"
    }
    try:
        resp = requests.post(url, data=data, timeout=15)
        if resp.status_code != 200:
            print(f"‚ö†Ô∏è Telegram API chyba: {resp.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è Telegram v√Ωjimka: {e}")

def nacti_ceny(cesta):
    if not os.path.exists(cesta):
        raise FileNotFoundError(f"Nenalezen soubor s cenami: {cesta}")
    df = pd.read_csv(cesta)
    # oƒçek√°v√°me sloupce Hodina,Cena (EUR/MWh)
    if "Hodina" not in df.columns or "Cena (EUR/MWh)" not in df.columns:
        raise ValueError("Neplatn√Ω form√°t souboru s cenami.")
    return df

def je_cena_pod_limitem(df):
    now = datetime.now()
    # re≈æim: vyhodnocovat jen mezi 9 a 18 hodinou (vƒçetnƒõ)
    if not (9 <= now.hour <= 18):
        print(f"‚ÑπÔ∏è Aktu√°ln√≠ hodina {now.hour} mimo rozsah 9‚Äì18. Skript konƒç√≠ bez akce.")
        return None  # indikuje: bez akce

    aktualni_hodina = now.hour + 1  # cena plat√≠ DO t√©to hodiny
    row = df[df["Hodina"] == aktualni_hodina]
    if row.empty:
        raise LookupError(f"Nelze naj√≠t cenu pro hodinu {aktualni_hodina} v souboru.")
    cena = float(row.iloc[0]["Cena (EUR/MWh)"])
    print(f"üîç Cena pro {aktualni_hodina - 1}.‚Äì{aktualni_hodina}. hod: {cena:.2f} EUR/MWh (limit {LIMIT_EUR})")
    return cena < LIMIT_EUR

def najdi_zarizeni(api):
    devices = api.get_all_devices()
    for d in devices:
        try:
            if DEVICE_NAME.lower() in d.name().lower():
                return d
        except Exception:
            continue
    return None

def ovladej_rele(pod_limitem):
    print("üîå P≈ôipojuji se k Tuya API‚Ä¶")
    api = TuyaApi()
    api.init(API_KEY, API_SECRET)
    api.login(EMAIL, PASSWORD)

    device = najdi_zarizeni(api)
    if device is None:
        raise RuntimeError("Za≈ô√≠zen√≠ nebylo nalezeno v Tuya √∫ƒçtu. Zkontrolujte propojen√≠ Smart Life <-> Tuya IoT.")

    pozadovany_stav = bool(pod_limitem)  # True = ON, False = OFF
    akce_text = "ZAPNUTO" if pozadovany_stav else "VYPNUTO"

    for pokus in range(1, POKUSY + 1):
        print(f"üß™ Pokus {pokus}/{POKUSY} nastavovat stav {akce_text}‚Ä¶")
        try:
            if pozadovany_stav:
                device.turn_on()
            else:
                device.turn_off()
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi pos√≠l√°n√≠ p≈ô√≠kazu: {e}")

        print(f"‚è≥ ƒåek√°m {CEKANI} s pro potvrzen√≠...")
        time.sleep(CEKANI)

        # Kontrola stavu
        try:
            status = device.status()
            # knihovny mohou m√≠t r≈Øzn√© kl√≠ƒçe; nejbƒõ≈ænƒõj≈°√≠ je "is_on"
            aktualni = None
            if isinstance(status, dict):
                if "is_on" in status:
                    aktualni = bool(status.get("is_on"))
                else:
                    # fallback: prohledej hodnoty
                    for v in status.values():
                        if isinstance(v, bool):
                            aktualni = v
                            break
            print(f"‚ÑπÔ∏è Stav za≈ô√≠zen√≠ (report): {status} ; interpretov√°no jako: {aktualni}")
            if aktualni == pozadovany_stav:
                cas = datetime.now().strftime("%H:%M")
                zpr = f"‚úÖ <b>Rel√© {akce_text}</b> ({cas}) ‚Äì potvrzeno (pokus {pokus})."
                odesli_telegram_zpravu(zpr)
                print("‚úÖ Potvrzeno, konƒç√≠m.")
                return
            else:
                print("‚ö†Ô∏è Stav se neshoduje s po≈æadovan√Ωm. Pokraƒçuji v opakov√°n√≠.")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi ƒçten√≠ stavu za≈ô√≠zen√≠: {e}")

    # pokud se nedos√°hlo po≈æadovan√©ho stavu
    cas = datetime.now().strftime("%H:%M")
    zpr = f"‚ùå <b>Rel√© NEREAGUJE</b> ({cas}) ‚Äì nepoda≈ôilo se p≈ôepnout na {akce_text} po {POKUSY} pokusech."
    odesli_telegram_zpravu(zpr)
    raise RuntimeError("Nedo≈°lo k potvrzen√≠ p≈ôepnut√≠ za≈ô√≠zen√≠ po v√≠ce pokusech.")

# ====== HLAVN√ç BƒöH ======
def main():
    try:
        df = nacti_ceny(CENY_PATH)
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ cen: {e}")
        sys.exit(2)

    try:
        pod_limitem = je_cena_pod_limitem(df)
        if pod_limitem is None:
            # mimo provozn√≠ hodiny
            sys.exit(0)
        ovladej_rele(pod_limitem)
        print("üèÅ Hotovo.")
    except Exception as e:
        print(f"üõë Chyba ve skriptu: {e}")
        # poslat telegram o chybƒõ (voliteln√©)
        try:
            odesli_telegram_zpravu(f"üõë Chyba ve skriptu ovladani_rele: {e}")
        except Exception:
            pass
        sys.exit(3)

if __name__ == "__main__":
    main()
